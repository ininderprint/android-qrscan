package com.qrscan;

import java.io.IOException;
import android.util.Log;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;

import com.sun.jna.ptr.IntByReference;
import com.qrscan.Vbar;

public class QrscanModule extends ReactContextBaseJavaModule {
    
    boolean state = false;
	boolean devicestate = false;
    IntByReference device;
    Vbar b = new Vbar();

    private final ReactApplicationContext reactContext;

    public QrscanModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "Qrscan";
    }

    @ReactMethod
    public void open(Promise promise) {
        state = b.vbarOpen();
        if (state) {
            promise.resolve("open success");
        } else {
            devicestate = false;
            promise.reject("Error");
        }
    }

    @ReactMethod
    public void close(Promise promise) {
        devicestate = false;
        b.closeDev();
        if (state) {
            promise.resolve("close success");
        } else {
            devicestate = false;
            promise.reject("Error");
        }
    }

    @ReactMethod
    public void requestPermission(Promise promise) {
        try {
            String command = "chmod -R 777 /dev/bus/usb";
            Runtime runtime = Runtime.getRuntime(); 
            Process proc = runtime.exec(command);
            promise.resolve("requestPermission success");
        } catch (IOException e) {
            promise.reject("Error");
        }
    }

    @ReactMethod
    public void light(boolean isOpen, Promise promise) {
        b.vbarLight(isOpen);
        promise.resolve("light success");
    }

    @ReactMethod
    public void startDecode(final Promise promise) {
        Thread t = new Thread(){
            @Override
            public void run() {
                super.run();
                while(true)
                {
                    final String str = b.getResultsingle();
                    if(str != null) {
                        WritableMap params = Arguments.createMap();
                        params.putString("qrcode", str + "\r\n");
                        sendEvent("DecodeQrcode", params);
                    }
                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                        promise.reject("Error");
                    }
                }
            }
        };
        t.start();
    }

    private void sendEvent(String eventName, WritableMap params) {
        reactContext
            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
            .emit(eventName, params);
    }

}
